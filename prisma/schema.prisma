// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String       @id @default(uuid())
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  username     String       @unique
  passwordHash String
  role         String
  userMatches  UserMatch[]
  userTeams    UserTeam[]
  ranking      UserRanking?
}

model UserRanking {
  id            Int    @id @default(autoincrement())
  groupPoints   Int
  playoffPoints Int
  totalPoints   Int
  user          User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String @unique
}

model UserMatch {
  id            Int     @id @default(autoincrement())
  matchId       Int
  match         Match   @relation(fields: [matchId], references: [id], onDelete: Cascade)
  userId        String
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  homeTeamScore Int?
  awayTeamScore Int?
  goalScorer    Player? @relation(fields: [goalScorerId], references: [id], onDelete: Cascade)
  goalScorerId  Int?
}

model UserTeam {
  id             Int    @id @default(autoincrement())
  teamId         String
  team           Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  userId         String
  user           User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  points         Int
  goalDifference Int
}

model Group {
  id      String  @id
  name    String  @unique
  teams   Team[]
  matches Match[]
}

model Playoff {
  id      String  @id
  name    String  @unique
  matches Match[]
}

model Stage {
  id      String  @id
  name    String  @unique
  matches Match[]
}

model Team {
  id        String     @id
  name      String
  homeTeams Match[]    @relation(name: "homeTeam")
  awayTeams Match[]    @relation(name: "awayTeam")
  group     Group      @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId   String
  userTeams UserTeam[]
  players   Player[]
}

model Player {
  id                Int               @id @default(autoincrement())
  name              String            @unique
  team              Team              @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId            String
  userMatches       UserMatch[]
  tournamentMatches TournamentMatch[]
}

model Match {
  id                Int               @id @default(autoincrement())
  homeTeam          Team?             @relation(name: "homeTeam", fields: [homeTeamId], references: [id], onDelete: Cascade)
  awayTeam          Team?             @relation(name: "awayTeam", fields: [awayTeamId], references: [id], onDelete: Cascade)
  homeTeamId        String?
  awayTeamId        String?
  group             Group?            @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId           String?
  playoff           Playoff?          @relation(fields: [playoffId], references: [id], onDelete: Cascade)
  playoffId         String?
  stage             Stage             @relation(fields: [stageId], references: [id], onDelete: Cascade)
  stageId           String
  userMatches       UserMatch[]
  tournamentMatches TournamentMatch[]
  startDate         DateTime
  stadium           Stadium           @relation(fields: [stadiumId], references: [id], onDelete: Cascade)
  stadiumId         String
}

model TournamentMatch {
  id            Int     @id @default(autoincrement())
  matchId       Int
  match         Match   @relation(fields: [matchId], references: [id], onDelete: Cascade)
  homeTeamScore Int?
  awayTeamScore Int?
  goalScorer    Player? @relation(fields: [goalScorerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  goalScorerId  Int?
}

model Stadium {
  id      String  @id
  name    String  @unique
  matches Match[]
}
